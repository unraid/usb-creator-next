############################################################################################
#      NSIS Installation Script created by NSIS Quick Setup Script Generator v1.09.18
#               Entirely Edited with NullSoft Scriptable Installation System                
#              by Vlasis K. Barkas aka Red Wine red_wine@freemail.gr Sep 2006               
############################################################################################

!define APP_NAME           "Unraid USB Creator"
!define COMP_NAME          "Lime Technology, Inc"
!define VERSION            "@IMAGER_VERSION_STR@"
!define INSTALLER_NAME     "unraid-usb-creator-${VERSION}.exe"
!define /date CURRENT_YEAR "%Y"
!define COPYRIGHT          "${CURRENT_YEAR} ${COMP_NAME}"
!define DESCRIPTION        "${APP_NAME} installer"
!define MAIN_APP_EXE       "unraid-usb-creator.exe"
!define INSTALL_TYPE       "SetShellVarContext all"
!define REG_ROOT           "HKLM"
!define REG_APP_PATH       "Software\Microsoft\Windows\CurrentVersion\App Paths\${MAIN_APP_EXE}"
!define UNINSTALL_PATH     "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APP_NAME}"


# Window to close if running
!define EXE_TO_TERMINATE "unraid-usb-creator.exe"

######################################################################

VIProductVersion "@IMAGER_VERSION_MAJOR@.@IMAGER_VERSION_MINOR@.0.0"
VIAddVersionKey  "ProductName"     "${APP_NAME}"
VIAddVersionKey  "CompanyName"     "${COMP_NAME}"
VIAddVersionKey  "LegalCopyright"  "${COPYRIGHT}"
VIAddVersionKey  "FileDescription" "${DESCRIPTION}"
VIAddVersionKey  "FileVersion"     "${VERSION}"
VIAddVersionKey  "ProductVersion"  "${VERSION}"

######################################################################

RequestExecutionLevel admin
SetCompressor /SOLID lzma
Name         "${APP_NAME}"
Caption      "${APP_NAME} ${VERSION}"
OutFile      "${INSTALLER_NAME}"
BrandingText "${APP_NAME}"
XPStyle on
InstallDirRegKey "${REG_ROOT}" "${REG_APP_PATH}" ""
InstallDir "$PROGRAMFILES64\Unraid USB Creator"

######################################################################

; Optional inner/signing (disabled by default)
!ifndef SIGN
  !define SIGN "0"
!endif

!if "${SIGN}" == "1"
  !echo "Outer invocation"
  ; Re-run makensis defining INNER to extract and sign the uninstaller
  !makensis '-DINNER "${__FILE__}"' = 0
  !system 'set __COMPAT_LAYER=RunAsInvoker &"$TEMP\tempinstaller.exe"' = 2
  !system '"@SIGNTOOL@" sign /tr http://timestamp.digicert.com /td sha256 /fd sha256 /a "$TEMP\uninstall.exe"' = 0
  !finalize '"@SIGNTOOL@" sign /tr http://timestamp.digicert.com /td sha256 /fd sha256 /a "%1"'
!endif


###


!include "MUI.nsh"
!include "WinVer.nsh"
!include "x64.nsh"

!define MUI_ABORTWARNING
!define MUI_UNABORTWARNING

!insertmacro MUI_PAGE_WELCOME

!ifdef LICENSE_TXT
!insertmacro MUI_PAGE_LICENSE "${LICENSE_TXT}"
!endif

!ifdef REG_START_MENU
!define MUI_STARTMENUPAGE_NODISABLE
!define MUI_STARTMENUPAGE_DEFAULTFOLDER "Unraid"
!define MUI_STARTMENUPAGE_REGISTRY_ROOT "${REG_ROOT}"
!define MUI_STARTMENUPAGE_REGISTRY_KEY "${UNINSTALL_PATH}"
!define MUI_STARTMENUPAGE_REGISTRY_VALUENAME "${REG_START_MENU}"
!insertmacro MUI_PAGE_STARTMENU Application $SM_Folder
!endif

!insertmacro MUI_PAGE_INSTFILES

!define MUI_FINISHPAGE_RUN "$INSTDIR\${MAIN_APP_EXE}"
!insertmacro MUI_PAGE_FINISH

!insertmacro MUI_UNPAGE_CONFIRM

!insertmacro MUI_UNPAGE_INSTFILES

!insertmacro MUI_UNPAGE_FINISH

######################################################################
# TRANSLATIONS
######################################################################

!insertmacro MUI_LANGUAGE "English"
!insertmacro MUI_LANGUAGE "Dutch"
!insertmacro MUI_LANGUAGE "Italian"

LangString termMsg ${LANG_ENGLISH} "Unraid USB Creator seems to be running and busy.$\nDo you want to terminate process?"
LangString stopMsg ${LANG_ENGLISH} "Stopping Unraid USB Creator"
LangString win10Msg ${LANG_ENGLISH} "Windows 10 or above required"
LangString x64Msg ${LANG_ENGLISH} "64-bit Windows is required"

LangString termMsg ${LANG_DUTCH} "Unraid USB Creator is momenteel actief.$\nWilt u het programma afsluiten?"
LangString stopMsg ${LANG_DUTCH} "Bezig met afsluiten Unraid USB Creator"
LangString win10Msg ${LANG_DUTCH} "Minimaal Windows 10 is vereist"
LangString x64Msg ${LANG_DUTCH} "64-bit Windows is vereist"

LangString termMsg ${LANG_ITALIAN} "Unraid USB Creator sembra essere in esecuzione e occupato.$\nVuoi terminare il processo Unraid USB Creator?"
LangString stopMsg ${LANG_ITALIAN} "Chiusura processo Unraid USB Creator"
LangString win10Msg ${LANG_ITALIAN} "Per l'esecuzione del programma è richiesto Windows 10 o versioni successive"
LangString x64Msg ${LANG_ITALIAN} "È richiesto Windows a 64 bit"

######################################################################

!include WinMessages.nsh
!include Logiclib.nsh

!macro FindWindowOfExe Exe
    Push $1
    Push $2
    Push $3
    Push $R0
    Push $R1

    SetPluginUnload alwaysoff
    Push "0" ; Result code
    System::Get "(i.r1, i) iss"
    Pop $R0
    System::Call "user32::EnumWindows(k R0, i) i.s"

    loop:
      Pop $0
      StrCmp $0 "callback1" 0 doneloop
      System::Call 'user32.dll::GetWindowThreadProcessId(i r1, *i .r3) i .r2'
      System::Call 'kernel32.dll::OpenProcess(i 1040, i 0, i r3) i .r2'
      ${IfNot} $2 = 0
        System::Alloc 1024
        Pop $R1
        System::Call "Psapi::EnumProcessModules(i r2, i R1, i 1024, *i .r3) i .r0"
        ${IfNot} $0 = 0
          System::Call "*$R1(i .r0)"
          System::Call "Psapi::GetModuleBaseName(i r2, i r0, t .r3, i ${NSIS_MAX_STRLEN}) i .r0"
          ${IfNot} $0 = 0
            ${If} $3 == "${Exe}"
              # Only replace result value if it is first match
              Pop $3
              ${If} $3 == 0
                Push $1
              ${Else}
                Push $3
              ${EndIf}
            ${EndIf}
          ${EndIf}
        ${EndIf}
        System::Free $R1
        System::Call "kernel32::CloseHandle(i r2)"
      ${EndIf}

      Push 1
      System::Call "$R0"
      Goto loop
    doneloop:
      SetPluginUnload manual

    System::Free $R0
    Pop $0

    Pop $R1
    Pop $R0
    Pop $3
    Pop $2
    Pop $1
!macroend

!macro TerminateApp
    Push $0 ; window handle
    Push $1
    Push $2 ; process handle
    DetailPrint "$(stopMsg)"
    #FindWindow $0 '' '${WND_TITLE}'
    !insertmacro FindWindowOfExe '${EXE_TO_TERMINATE}'
    IntCmp $0 0 done
    System::Call 'user32.dll::GetWindowThreadProcessId(i r0, *i .r1) i .r2'
    System::Call 'kernel32.dll::OpenProcess(i 0x00100001, i 0, i r1) i .r2'
    SendMessage $0 ${WM_CLOSE} 0 0 /TIMEOUT=2000
    System::Call 'kernel32.dll::WaitForSingleObject(i r2, i 2000) i .r1'
    IntCmp $1 0 close
    MessageBox MB_YESNOCANCEL|MB_ICONEXCLAMATION "$(termMsg)" /SD IDYES IDYES terminate IDNO close
    System::Call 'kernel32.dll::CloseHandle(i r2) i .r1'
    Quit
  terminate:
    System::Call 'kernel32.dll::TerminateProcess(i r2, i 0) i .r1'
  close:
    System::Call 'kernel32.dll::CloseHandle(i r2) i .r1'
  done:
    Pop $2
    Pop $1
    Pop $0
!macroend


Function un.DeleteEverythingUnderInstDir
  ; Delete files and directories under $INSTDIR except the running uninstaller
  FindFirst $0 $1 "$INSTDIR\*.*"
  loop:
    StrCmp $1 "" done
    StrCmp $1 "." next
    StrCmp $1 ".." next
    StrCpy $2 "$INSTDIR\$1"
    IfFileExists "$2\*.*" 0 +3
      RMDir /r "$2"
      Goto next
    StrCmp "$2" "$INSTDIR\uninstall.exe" +2 0
      Delete "$2"
  next:
    FindNext $0 $1
    Goto loop
  done:
  FindClose $0
FunctionEnd


######################################################################

Section -MainProgram
${INSTALL_TYPE}
!insertmacro TerminateApp
SetOverwrite ifnewer
SetOutPath "$INSTDIR"

; Install everything that was staged in deploy
File /r "deploy\*"

SectionEnd

######################################################################

Section -Icons_Reg

!ifndef INNER
SetOutPath "$INSTDIR"
WriteUninstaller "$INSTDIR\uninstall.exe"
!endif


!ifdef REG_START_MENU
!insertmacro MUI_STARTMENU_WRITE_BEGIN Application
CreateDirectory "$SMPROGRAMS\$SM_Folder"
CreateShortCut "$SMPROGRAMS\$SM_Folder\${APP_NAME}.lnk" "$INSTDIR\${MAIN_APP_EXE}"
!ifdef WEB_SITE
WriteIniStr "$INSTDIR\${APP_NAME} website.url" "InternetShortcut" "URL" "${WEB_SITE}"
CreateShortCut "$SMPROGRAMS\$SM_Folder\${APP_NAME} Website.lnk" "$INSTDIR\${APP_NAME} website.url"
!endif
!insertmacro MUI_STARTMENU_WRITE_END
!endif

!ifndef REG_START_MENU
CreateDirectory "$SMPROGRAMS\Unraid"
CreateShortCut "$SMPROGRAMS\Unraid\${APP_NAME}.lnk" "$INSTDIR\${MAIN_APP_EXE}"
!ifdef WEB_SITE
WriteIniStr "$INSTDIR\${APP_NAME} website.url" "InternetShortcut" "URL" "${WEB_SITE}"
CreateShortCut "$SMPROGRAMS\Unraid\${APP_NAME} Website.lnk" "$INSTDIR\${APP_NAME} website.url"
!endif
!endif

WriteRegStr ${REG_ROOT} "${REG_APP_PATH}" "" "$INSTDIR\${MAIN_APP_EXE}"
WriteRegStr ${REG_ROOT} "${UNINSTALL_PATH}"  "DisplayName" "${APP_NAME}"
WriteRegStr ${REG_ROOT} "${UNINSTALL_PATH}"  "UninstallString" "$INSTDIR\uninstall.exe"
WriteRegStr ${REG_ROOT} "${UNINSTALL_PATH}"  "QuietUninstallString" "$\"$INSTDIR\uninstall.exe$\" /S"
WriteRegStr ${REG_ROOT} "${UNINSTALL_PATH}"  "DisplayIcon" "$INSTDIR\${MAIN_APP_EXE}"
WriteRegStr ${REG_ROOT} "${UNINSTALL_PATH}"  "DisplayVersion" "${VERSION}"
WriteRegStr ${REG_ROOT} "${UNINSTALL_PATH}"  "Publisher" "${COMP_NAME}"
WriteRegStr ${REG_ROOT} "${UNINSTALL_PATH}"  "InstallLocation" "$INSTDIR"
WriteRegDWORD ${REG_ROOT} "${UNINSTALL_PATH}" "NoModify" 1
WriteRegDWORD ${REG_ROOT} "${UNINSTALL_PATH}" "NoRepair" 1

!ifdef WEB_SITE
WriteRegStr ${REG_ROOT} "${UNINSTALL_PATH}"  "URLInfoAbout" "${WEB_SITE}"
!endif


WriteRegStr SHCTX "Software\Classes\.zip\OpenWithProgIds" "UNRAID_USB_CREATOR" ""
WriteRegStr SHCTX "Software\Classes\.gz\OpenWithProgIds" "UNRAID_USB_CREATOR" ""
WriteRegStr SHCTX "Software\Classes\.xz\OpenWithProgIds" "UNRAID_USB_CREATOR" ""
WriteRegStr SHCTX "Software\Classes\.img\OpenWithProgIds" "UNRAID_USB_CREATOR" ""
WriteRegStr SHCTX "Software\Classes\.wic\OpenWithProgIds" "UNRAID_USB_CREATOR" ""
WriteRegStr SHCTX "Software\Classes\.zstd\OpenWithProgIds" "UNRAID_USB_CREATOR" ""
WriteRegStr SHCTX "Software\Classes\UNRAID_USB_CREATOR\shell\open" "FriendlyAppName" "UNRAID_USB_CREATOR"
WriteRegStr SHCTX "Software\Classes\UNRAID_USB_CREATOR\shell\open\command" "" '"$INSTDIR\unraid-usb-creator.exe" "%1"'

SectionEnd

######################################################################

Section Uninstall
${INSTALL_TYPE}
!insertmacro TerminateApp

; Remove Start Menu shortcuts
!ifdef REG_START_MENU
!insertmacro MUI_STARTMENU_GETFOLDER "Application" $SM_Folder
Delete "$SMPROGRAMS\$SM_Folder\${APP_NAME}.lnk"
!ifdef WEB_SITE
Delete "$SMPROGRAMS\$SM_Folder\${APP_NAME} Website.lnk"
!endif
RmDir "$SMPROGRAMS\$SM_Folder"
!endif

!ifndef REG_START_MENU
Delete "$SMPROGRAMS\Unraid\${APP_NAME}.lnk"
!ifdef WEB_SITE
Delete "$SMPROGRAMS\Unraid\${APP_NAME} Website.lnk"
!endif
RmDir "$SMPROGRAMS\Unraid"
!endif

; Unregister
DeleteRegKey ${REG_ROOT} "${REG_APP_PATH}"
DeleteRegKey ${REG_ROOT} "${UNINSTALL_PATH}"

; File associations
DeleteRegValue SHCTX "Software\Classes\.zip\OpenWithProgIds" "UNRAID_USB_CREATOR"
DeleteRegValue SHCTX "Software\Classes\.gz\OpenWithProgIds" "UNRAID_USB_CREATOR"
DeleteRegValue SHCTX "Software\Classes\.xz\OpenWithProgIds" "UNRAID_USB_CREATOR"
DeleteRegValue SHCTX "Software\Classes\.img\OpenWithProgIds" "UNRAID_USB_CREATOR"
DeleteRegValue SHCTX "Software\Classes\.wic\OpenWithProgIds" "UNRAID_USB_CREATOR"
DeleteRegValue SHCTX "Software\Classes\.zstd\OpenWithProgIds" "UNRAID_USB_CREATOR"
DeleteRegKey   SHCTX "Software\Classes\UNRAID_USB_CREATOR"

; Remove per-user data for current user
RMDir /r "$APPDATA\Unraid\${APP_NAME}"
RMDir "$APPDATA\Unraid"
RMDir /r "$LOCALAPPDATA\Unraid\${APP_NAME}"
RMDir "$LOCALAPPDATA\Unraid"

; Remove installed files and directory
SetOutPath "$TEMP"
Call un.DeleteEverythingUnderInstDir
Delete "$INSTDIR\uninstall.exe"
RMDir "$INSTDIR"

SectionEnd

######################################################################


Function .onInit
  
!ifdef INNER

  ; If INNER is defined, then we aren't supposed to do anything except write out
  ; the uninstaller.  This is better than processing a command line option as it means
  ; this entire code path is not present in the final (real) installer.
  SetSilent silent
  WriteUninstaller "$%TEMP%\uninstall.exe"
  Quit  ; just bail out quickly when running the "inner" installer
!else
  ${IfNot} ${AtLeastWin10}
    MessageBox MB_OK "$(win10Msg)"
    Quit
  ${EndIf}
  ${IfNot} ${RunningX64}
    MessageBox MB_OK "$(x64Msg)"
    Quit
  ${EndIf}
  SetRegView 64
!endif
FunctionEnd

Function un.onInit
  SetRegView 64
FunctionEnd
