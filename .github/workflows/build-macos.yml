name: Build MacOS

on:
  push:
    branches: ["main", "v1.9.6-rebase"]
  pull_request:
    branches: ["main", "v1.9.6-rebase"]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: MinSizeRel
  QT_VERSION: "6.9.1"
  QT_MAJOR_VERSION: "6"

jobs:
  build:
    runs-on: macos-latest

    defaults:
      run:
        working-directory: src

    steps:
      - uses: actions/checkout@v3

      - name: Validate CMake
        run: |
          cmake --version

      # aqt get started --> https://aqtinstall.readthedocs.io/en/latest/index.html
      # aqt docs archives installation (what we use) --> https://aqtinstall.readthedocs.io/en/latest/getting_started.html#installing-a-subset-of-qt-archives-advanced
      - name: Install aqt-install
        run: |
          brew install aqtinstall

      # Use Qt > 6.7, explicitly using clang_64, but that's default
      - name: Install Qt ${{ env.QT_VERSION }}
        run: |
          aqt install-qt mac desktop ${{ env.QT_VERSION }} clang_64 \
          --archives qtbase qtdeclarative qtsvg qttools icu \
          --outputdir "$HOME/Qt"

      # QT is installed in --> "$HOME/Qt/${{ env.QT_VERSION }}/macos"
      - name: Configure & build using CMake
        env:
          QT_DIR: "$HOME/Qt/${{ env.QT_VERSION }}/macos"
        run: |
          cmake -S . -B ../build \
            -DCMAKE_BUILD_TYPE="${{ env.BUILD_TYPE }}" \
            -DCMAKE_C_COMPILER=/usr/bin/clang \
            -DCMAKE_CXX_COMPILER=/usr/bin/clang++ \
            -DQt6_ROOT="${{env.QT_DIR}}" \
            -DQt6_DIR="${{env.QT_DIR}}/lib/cmake/Qt${{env.QT_MAJOR_VERSION}}"

          cmake --build ../build

      # Setup keychain and certificates for signing & unlock keychain
      - name: Setup Keychain and Certificates
        env:
          APPLE_BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE_BASE64 }}
          APPLE_BUILD_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_BUILD_CERTIFICATE_PASSWORD }}
          APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          chmod +x ../scripts/setup-keychain-mac.sh
          ../scripts/setup-keychain-mac.sh

        # Code sign the .app with proper certificate
      - name: Code Sign .app
        env:
          APPLE_SIGNING_KEY_ID: ${{ secrets.APPLE_SIGNING_KEY_ID }}
          APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          CAPP="../build/unraid-usb-creator.app"
          codesign --deep --force --verify --verbose --sign "$APPLE_SIGNING_KEY_ID" --options runtime "$CAPP"

      - name: Remove quarantine attribute
        run: sudo xattr -rc ../build/unraid-usb-creator.app

      - name: Install create-dmg
        run: |
          brew update
          brew install create-dmg
      - name: Create DMG with drag-to-Applications UI
        run: |
          # Make sure there's a Releases/ folder in the repo root
          mkdir -p "${{ github.workspace }}/Releases"

          # Create a “drag-to-Applications” DMG:
          create-dmg \
            --volname "Unraid Installer" \
            --volicon "${{ github.workspace }}/src/icons/unraid.icns" \
            --background "${{ github.workspace }}/src/icons/UN-logotype-gradient.png" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon "unraid-usb-creator.app" 200 190 \
            --hide-extension "unraid-usb-creator.app" \
            --app-drop-link 600 185 \
            "${{ github.workspace }}/Releases/unraid-usb-creator.dmg" \
            "${{ github.workspace }}/build/unraid-usb-creator.app"
      - name: Notarize DMG
        env:
          APPLE_EMAIL_ADDRESS: ${{ secrets.APPLE_EMAIL_ADDRESS }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cd "${{ github.workspace }}/Releases"
          xcrun notarytool submit "unraid-usb-creator.dmg" --apple-id "$APPLE_EMAIL_ADDRESS" --password "$APPLE_APP_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait
          xcrun stapler staple "unraid-usb-creator.dmg"

      - name: Prepare artifact
        run: |
          mv "${{ github.workspace }}/Releases/unraid-usb-creator.dmg" \
             "${{ github.workspace }}/Releases/Unraid USB Creator.dmg"

      - name: Upload Mac DMG
        uses: actions/upload-artifact@v4
        with:
          name: macOS DMG
          path: "Releases/Unraid USB Creator.dmg"
